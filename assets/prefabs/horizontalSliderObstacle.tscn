[gd_scene load_steps=4 format=3 uid="uid://bexhrk031q7a5"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_bl13t"]
size = Vector2(15, 8)

[sub_resource type="GDScript" id="GDScript_iyx0m"]
resource_name = "obstacleButtonCollider"
script/source = "extends CollisionShape2D

@onready var start_position: Vector2 = self.position
@onready var slider_length: float = get_child(0).shape.extents.x
@onready var grabber_length: float = self.shape.extents.x

@export var is_filled: bool = false

func calculate_grabber_x_offset(slider_value):
	return (slider_length - grabber_length) * slider_value * 2

func calculate_grabber_position(slider_value):
	return Vector2(calculate_grabber_x_offset(slider_value)
			+ start_position.x, start_position.y)

func _on_slider_value_changed(value):
	if is_filled:
		var new_rectangle = RectangleShape2D.new()
		new_rectangle.size = Vector2(calculate_grabber_x_offset(value)
				+ grabber_length, self.shape.extents.y)
		self.set_shape(new_rectangle)
		self.position = Vector2(start_position.x + new_rectangle.size.x / 2, start_position.y)
	else:
		self.position = calculate_grabber_position(value)
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_1bw8s"]
size = Vector2(164, 14)

[node name="AnimatableBody2D" type="AnimatableBody2D"]

[node name="Control2" type="Control" parent="."]
layout_mode = 3
anchors_preset = 0
offset_left = -63.0
offset_top = -8.0
offset_right = -63.0
offset_bottom = -8.0

[node name="HSlider" type="HSlider" parent="Control2"]
layout_mode = 0
offset_left = -18.0
offset_right = 146.0
offset_bottom = 16.0
max_value = 1.0
step = 0.01

[node name="SliderCollider2" type="CollisionShape2D" parent="."]
position = Vector2(-73.5, 0)
shape = SubResource("RectangleShape2D_bl13t")
script = SubResource("GDScript_iyx0m")

[node name="SliderLength" type="CollisionShape2D" parent="SliderCollider2"]
position = Vector2(74.5, 0)
shape = SubResource("RectangleShape2D_1bw8s")
disabled = true

[connection signal="value_changed" from="Control2/HSlider" to="SliderCollider2" method="_on_slider_value_changed"]
[connection signal="value_changed" from="Control/HSlider" to="SliderCollider" method="_on_slider_value_changed"]
